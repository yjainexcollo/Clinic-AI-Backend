# NOTE: Building the spec module-by-module. First: Health.
openapi: 3.0.3
info:
  title: Clinic-AI API
  version: 1.0.0
  description: "AI-powered clinical intake system. This spec is being filled module-by-module."
servers:
  - url: http://localhost:8000
paths:
  /health/:
    get:
      tags: [Health]
      summary: Health check
      operationId: health_check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_HealthResponse'
  /health/ready:
    get:
      tags: [Health]
      summary: Readiness check
      operationId: readiness_check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_Dict'
  /health/live:
    get:
      tags: [Health]
      summary: Liveness check
      operationId: liveness_check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_Dict'
  /patients/:
    post:
      tags: [Patients]
      summary: Register a new patient and start intake session
      operationId: register_patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPatientRequest'
      responses:
        '201':
          description: Patient registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_RegisterPatientResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Duplicate patient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid symptom
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /patients/consultations/answer:
    post:
      tags: [Patients]
      summary: Answer an intake question
      operationId: answer_intake_question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerIntakeRequest'
      responses:
        '200':
          description: Answer accepted, next question or completion returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_AnswerIntakeResponse'
        '400': {description: Validation error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '404': {description: Patient or visit not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '409': {description: Intake already completed, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '422': {description: Question limit exceeded or duplicate question, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
    patch:
      tags: [Patients]
      summary: Edit intake answer
      operationId: edit_intake_answer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditAnswerRequest'
      responses:
        '200': {description: Edit accepted, content: {application/json: {schema: {$ref: '#/components/schemas/ApiResponse_EditAnswerResponse'}}}}
        '400': {description: Validation error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '404': {description: Patient or visit not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /patients/webhook/images:
    post:
      tags: [Patients]
      summary: Upload medication images for intake
      operationId: upload_medication_images
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                patient_id: {type: string}
                visit_id: {type: string}
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200': {description: Successful uploads or errors }
        '400': {description: Validation error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /patients/{patient_id}/visits/{visit_id}/intake-images/{image_id}/content:
    get:
      tags: [Patients]
      summary: Get intake medication image content
      operationId: get_intake_medication_image_content
      parameters:
        - name: patient_id
          in: path
          required: true
          schema: {type: string}
        - name: visit_id
          in: path
          required: true
          schema: {type: string}
        - name: image_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200': {description: Raw content returned}
        '403': {description: Access denied, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '404': {description: Not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /patients/{patient_id}/visits/{visit_id}/images:
    get:
      tags: [Patients]
      summary: List medication images for a visit
      operationId: list_medication_images
      parameters:
        - name: patient_id
          in: path
          required: true
          schema: {type: string}
        - name: visit_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200': {description: JSON with image metadata}
        '404': {description: Not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /patients/images/{image_id}:
    delete:
      tags: [Patients]
      summary: Delete a medication image
      operationId: delete_medication_image
      parameters:
        - name: image_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200': {description: Successful deletion}
        '404': {description: Not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /patients/summary/previsit:
    post:
      tags: [Patients]
      summary: Generate pre-visit clinical summary
      operationId: generate_pre_visit_summary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreVisitSummaryRequest'
      responses:
        '200':
          description: Previsit summary generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_PreVisitSummaryResponse'
        '400': {description: Validation error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '404': {description: Not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '422': {description: Intake not completed, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /patients/{patient_id}/visits/{visit_id}/summary:
    get:
      tags: [Patients]
      summary: Get pre-visit summary
      operationId: get_pre_visit_summary
      parameters:
        - name: patient_id
          in: path
          required: true
          schema: {type: string}
        - name: visit_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Previsit summary found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_PreVisitSummaryResponse'
        '404': {description: Not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /patients/summary/postvisit:
    post:
      tags: [Patients]
      summary: Generate post-visit summary
      operationId: generate_post_visit_summary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostVisitSummaryRequest'
      responses:
        '200':
          description: Postvisit summary generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_PostVisitSummaryResponse'
        '400': {description: Validation error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '404': {description: Not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '422': {description: Visit not completed or SOAP not available, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /patients/{patient_id}/visits/{visit_id}/summary/postvisit:
    get:
      tags: [Patients]
      summary: Get post-visit summary
      operationId: get_post_visit_summary
      parameters:
        - name: patient_id
          in: path
          required: true
          schema: {type: string}
        - name: visit_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Postvisit summary retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_PostVisitSummaryResponse'
        '404': {description: Not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /patients/{patient_id}/visits/{visit_id}/vitals:
    post:
      tags: [Patients]
      summary: Store vitals data for a visit
      operationId: store_vitals
      parameters:
        - name: patient_id
          in: path
          required: true
          schema:
            type: string
        - name: visit_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VitalsPayload'
      responses:
        '200':
          description: Vitals stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_Dict'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Patient or visit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: [Patients]
      summary: Get vitals data for a visit
      operationId: get_vitals
      parameters:
        - name: patient_id
          in: path
          required: true
          schema:
            type: string
        - name: visit_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get vitals success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_Dict'
        '404':
          description: Patient, visit, or vitals not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /intake/start:
    post:
      tags: [Intake]
      summary: Start intake session
      description: Initialize an intake session for a patient using the doctor's preferences.
      operationId: start_intake
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntakeStartRequest'
      responses:
        '200':
          description: Intake started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_IntakeStartResponse'
        '500': {description: Failed to start intake, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /intake/next-question:
    post:
      tags: [Intake]
      summary: Get next intake question
      description: Generate the next intake question using session-configured limits.
      operationId: next_question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NextQuestionRequest'
      responses:
        '200':
          description: Next question returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_NextQuestionResponse'
        '404': {description: Session not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /workflow/walk-in/create-visit:
    post:
      tags: [Workflow]
      summary: Create walk-in visit
      description: Create a walk-in visit for patients without intake.
      operationId: create_walk_in_visit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWalkInVisitRequestSchema'
      responses:
        '201':
          description: Walk-in visit created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_CreateWalkInVisitResponseSchema'
        '400': {description: Validation error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /workflow/visit/{visit_id}/available-steps:
    get:
      tags: [Workflow]
      summary: Get available workflow steps
      description: Get available workflow steps for a visit based on its workflow type and status.
      operationId: get_available_workflow_steps
      parameters:
        - name: visit_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200': {description: Available steps, content: {application/json: {schema: {$ref: '#/components/schemas/ApiResponse_Dict'}}}}
        '404': {description: Visit not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /workflow/visits/walk-in:
    get:
      tags: [Workflow]
      summary: List walk-in visits
      description: List walk-in visits with pagination.
      operationId: list_walk_in_visits
      parameters:
        - name: limit
          in: query
          required: false
          schema: {type: integer, default: 100}
        - name: offset
          in: query
          required: false
          schema: {type: integer, default: 0}
      responses:
        '200': {description: Walk-in visits listed, content: {application/json: {schema: {$ref: '#/components/schemas/ApiResponse_Dict'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /notes/transcribe:
    post:
      tags: [Notes]
      summary: Transcribe audio
      description: Queue audio transcription and return immediately (202).
      operationId: transcribe_audio
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [patient_id, visit_id, audio_file]
              properties:
                patient_id: {type: string}
                visit_id: {type: string}
                language: {type: string, default: en}
                audio_file: {type: string, format: binary}
      responses:
        '202': {description: Queued for transcription}
        '400': {description: Validation error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '404': {description: Patient or visit not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '422': {description: Invalid audio file or visit status, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /notes/soap/generate:
    post:
      tags: [Notes]
      summary: Generate SOAP note
      description: Generate SOAP note from transcript.
      operationId: generate_soap_note
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SoapGenerationRequest'
      responses:
        '200':
          description: SOAP note generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoapGenerationResponse'
        '400': {description: Validation error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '404': {description: Patient or visit not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '422': {description: No transcript available or invalid visit status, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /notes/{patient_id}/visits/{visit_id}/transcript:
    get:
      tags: [Notes]
      summary: Get transcript
      description: Get transcript for a visit.
      operationId: get_transcript
      parameters:
        - name: patient_id
          in: path
          required: true
          schema: {type: string}
        - name: visit_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Transcript returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_TranscriptionSessionDTO'
        '404': {description: Transcript not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '422': {description: Invalid input, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /notes/{patient_id}/visits/{visit_id}/soap:
    get:
      tags: [Notes]
      summary: Get SOAP note
      description: Get SOAP note for a visit.
      operationId: get_soap_note
      parameters:
        - name: patient_id
          in: path
          required: true
          schema: {type: string}
        - name: visit_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200':
          description: SOAP note returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_SoapNoteDTO'
        '404': {description: Patient, visit, or SOAP note not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /notes/vitals:
    post:
      tags: [Notes]
      summary: Store objective vitals
      operationId: store_vitals_notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotesVitalsPayload'
      responses:
        '200': {description: Vitals stored}
        '400': {description: Validation error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '404': {description: Patient or visit not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /notes/{patient_id}/visits/{visit_id}/vitals:
    get:
      tags: [Notes]
      summary: Get vitals
      operationId: get_vitals_notes
      parameters:
        - name: patient_id
          in: path
          required: true
          schema: {type: string}
        - name: visit_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Vitals returned
        content:
          application/json:
            schema:
              type: object
                additionalProperties: true
        '404': {description: Patient or visit not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /notes/{patient_id}/visits/{visit_id}/dialogue/structure:
    post:
      tags: [Notes]
      summary: Structure dialogue from transcript
      description: Clean PII and structure transcript into alternating Doctor/Patient JSON using LLM.
      operationId: structure_dialogue
      parameters:
        - name: patient_id
          in: path
          required: true
          schema: {type: string}
        - name: visit_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Structured dialogue returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_Dict'
        '404': {description: Patient, visit, or transcript not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /notes/test-cors:
    get:
      tags: [Notes]
      summary: Test CORS
      operationId: test_cors
      responses:
        '200': {description: OK}
  /transcription:
    post:
      tags: [Transcription]
      summary: Adhoc transcription
      operationId: transcribe_audio_adhoc
      requestBody:
        required: true
        content:
          multipart/form-data:
              schema:
                type: object
              required: [audio_file]
                properties:
                audio_file: {type: string, format: binary}
                language: {type: string, default: en}
      responses:
        '200':
          description: Transcription result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_AdhocTranscriptionResponse'
        '400': {description: No audio file or validation error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '422': {description: Invalid file type, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /transcription/structure:
    post:
      tags: [Transcription]
      summary: Structure transcript text
      operationId: structure_transcript_text
      requestBody:
        required: true
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/StructureTextRequest'
      responses:
        '200': {description: Structured dialogue returned, content: {application/json: {schema: {$ref: '#/components/schemas/ApiResponse_Dict'}}}}
        '400': {description: Empty transcript, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /transcription/adhoc/action-plan:
    post:
      tags: [Transcription]
      summary: Queue action plan generation
      operationId: generate_action_plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionPlanRequest'
      responses:
        '202': {description: Action plan generation started, content: {application/json: {schema: {$ref: '#/components/schemas/ApiResponse_ActionPlanResponse'}}}}
        '404': {description: Adhoc not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '422': {description: No transcript available, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /transcription/adhoc/{adhoc_id}/action-plan/status:
    get:
      tags: [Transcription]
      summary: Get action plan status
      operationId: get_action_plan_status
      parameters:
        - name: adhoc_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200': {description: Status returned, content: {application/json: {schema: {$ref: '#/components/schemas/ApiResponse_Dict'}}}}
        '404': {description: Not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /transcription/adhoc/{adhoc_id}/action-plan:
    get:
      tags: [Transcription]
      summary: Get action plan
      operationId: get_action_plan
      parameters:
        - name: adhoc_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200': {description: Action plan returned, content: {application/json: {schema: {$ref: '#/components/schemas/ApiResponse_Dict'}}}}
        '404': {description: Not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /audio/:
    get:
      tags: [Audio]
      summary: List audio files
      operationId: list_audio_files
      parameters:
        - name: patient_id
          in: query
          required: false
          schema: {type: string}
        - name: visit_id
          in: query
          required: false
          schema: {type: string}
        - name: audio_type
          in: query
          required: false
          schema: {type: string, description: 'adhoc | visit'}
        - name: limit
          in: query
          required: false
          schema: {type: integer, minimum: 1, maximum: 100, default: 50}
        - name: offset
          in: query
          required: false
          schema: {type: integer, minimum: 0, default: 0}
      responses:
        '200':
          description: Audio files listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_AudioListResponse'
        '500': {description: Failed to list audio files, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /audio/dialogue:
    get:
      tags: [Audio]
      summary: List structured dialogues for audio files
      operationId: list_audio_dialogues
      parameters:
        - name: patient_id
          in: query
          required: false
          schema: {type: string}
        - name: visit_id
          in: query
          required: false
          schema: {type: string}
        - name: audio_type
          in: query
          required: false
          schema: {type: string}
        - name: start_date
          in: query
          required: false
          schema: {type: string, format: date-time}
        - name: end_date
          in: query
          required: false
          schema: {type: string, format: date-time}
        - name: limit
          in: query
          required: false
          schema: {type: integer, minimum: 1, maximum: 100, default: 50}
        - name: offset
          in: query
          required: false
          schema: {type: integer, minimum: 0, default: 0}
      responses:
        '200':
          description: Audio dialogues listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_AudioDialogueListResponse'
        '500': {description: Failed to list audio dialogues, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /audio/{audio_id}:
    get:
      tags: [Audio]
      summary: Get audio file metadata
      operationId: get_audio_metadata
      parameters:
        - name: audio_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Audio metadata retrieved
          content:
            application/json:
          schema:
                $ref: '#/components/schemas/ApiResponse_AudioFileResponse'
        '404': {description: Audio not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Failed to get audio file, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
    delete:
      tags: [Audio]
      summary: Delete audio file
      operationId: delete_audio_file
      parameters:
        - name: audio_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '204': {description: Deleted}
        '404': {description: Audio not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Failed to delete audio file, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /audio/{audio_id}/download:
    get:
      tags: [Audio]
      summary: Download audio file
      operationId: download_audio_file
      parameters:
        - name: audio_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200': {description: Binary stream}
        '404': {description: Audio not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Failed to download audio file, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /audio/{audio_id}/stream:
    get:
      tags: [Audio]
      summary: Stream audio file
      operationId: stream_audio_file
      parameters:
        - name: audio_id
          in: path
          required: true
          schema: {type: string}
      responses:
        '200': {description: Binary stream}
        '404': {description: Audio not found, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
        '500': {description: Failed to stream audio file, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /audio/stats/summary:
    get:
      tags: [Audio]
      summary: Get audio storage statistics
      operationId: get_audio_stats
      responses:
        '200': {description: Stats returned, content: {application/json: {schema: {$ref: '#/components/schemas/ApiResponse_Dict'}}}}
        '500': {description: Failed to get audio statistics, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
  /doctor/preferences:
    get:
      tags: [Doctor]
      summary: Get doctor preferences
      description: Return latest preferences for the default doctor; independent of intake flow.
      operationId: get_doctor_preferences
      responses:
        '200':
          description: Doctor preferences loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_DoctorPreferencesResponse'
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
    post:
      tags: [Doctor]
      summary: Set doctor preferences
      description: Merge and persist doctor preferences; independent of intake flow.
      operationId: set_doctor_preferences
      requestBody:
        required: true
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/UpsertPreferencesRequest'
      responses:
        '200':
          description: Preferences updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_DoctorPreferencesResponse'
        '500': {description: Internal server error, content: {application/json: {schema: {$ref: '#/components/schemas/ErrorResponse'}}}}
components:
  schemas:
    ErrorResponse:
      type: object
      required: [success, error, message, timestamp, request_id]
      properties:
        success:
          type: boolean
          example: false
        error:
                  type: string
          example: INTERNAL_SERVER_ERROR
        message:
                  type: string
          example: An unexpected internal server error occurred.
        details:
                type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string
          format: uuid
    ApiResponse_HealthResponse:
      type: object
      required: [success, message, timestamp, request_id]
                properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: OK
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string
          format: uuid
        data:
          $ref: '#/components/schemas/HealthResponse'
    ApiResponse_RegisterPatientResponse:
                      type: object
      required: [success, message, timestamp, request_id, data]
                      properties:
        success:
          type: boolean
          example: true
        message:
                          type: string
          example: Created
        timestamp:
                          type: string
          format: date-time
        request_id:
                    type: string
          format: uuid
        data:
          $ref: '#/components/schemas/RegisterPatientResponse'
    RegisterPatientRequest:
      type: object
      required: [first_name, last_name, mobile, age, gender, recently_travelled, consent, country, language]
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 40
        last_name:
          type: string
          minLength: 1
          maxLength: 40
        mobile:
          type: string
          pattern: "^(\\+|)[0-9]{8,16}$"
        age:
          type: integer
          minimum: 0
          maximum: 120
        gender:
          type: string
        recently_travelled:
          type: boolean
        consent:
          type: boolean
        country:
          type: string
          minLength: 2
          maxLength: 2
        language:
          type: string
          minLength: 2
          maxLength: 2
    RegisterPatientResponse:
      type: object
      required: [patient_id, visit_id, first_question, message]
      properties:
        patient_id:
          type: string
        visit_id:
          type: string
        first_question:
          type: string
        message:
          type: string
    ApiResponse_Dict:
          type: object
      required: [success, message, timestamp, request_id, data]
          properties:
        success:
          type: boolean
          example: true
        message:
              type: string
          example: OK
        timestamp:
              type: string
          format: date-time
        request_id:
              type: string
          format: uuid
        data:
          type: object
          additionalProperties: true
    HealthResponse:
      type: object
      required: [status, timestamp, version, service]
      properties:
        status:
          type: string
          example: healthy
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: 0.1.0
        service:
          type: string
          example: Clinic-AI Intake Assistant
    VitalsPayload:
      type: object
      properties:
        bloodPressure: {type: string}
        heartRate: {type: string}
        temperature: {type: string}
        respiratoryRate: {type: string}
        oxygenSaturation: {type: string}
        weight: {type: string}
        height: {type: string}
        bmi: {type: string}
        notes: {type: string}
    AnswerIntakeRequest:
      type: object
      required: [patient_id, visit_id, question_id, answer]
      properties:
        patient_id:
          type: string
          format: uuid
        visit_id:
          type: string
          format: uuid
        question_id:
          type: string
          format: uuid
        answer:
          type: string
    ApiResponse_AnswerIntakeResponse:
      type: object
      required: [success, message, timestamp, request_id, data]
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: OK
        timestamp:
              type: string
          format: date-time
        request_id:
              type: string
          format: uuid
        data:
          type: object
          properties:
            next_question_id:
              type: string
              format: uuid
            completion_message:
              type: string
    EditAnswerRequest:
      type: object
      required: [patient_id, visit_id, question_id, answer]
      properties:
        patient_id:
          type: string
          format: uuid
        visit_id:
          type: string
          format: uuid
        question_id:
          type: string
          format: uuid
        answer:
          type: string
    ApiResponse_EditAnswerResponse:
      type: object
      required: [success, message, timestamp, request_id, data]
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: OK
        timestamp:
              type: string
              format: date-time
        request_id:
          type: string
          format: uuid
        data:
      type: object
      properties:
            next_question_id:
          type: string
              format: uuid
            completion_message:
          type: string
    PreVisitSummaryRequest:
      type: object
      required: [patient_id, visit_id]
      properties:
        patient_id:
          type: string
          format: uuid
        visit_id:
          type: string
          format: uuid
    ApiResponse_PreVisitSummaryResponse:
      type: object
      required: [success, message, timestamp, request_id, data]
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: OK
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string
          format: uuid
        data:
          type: object
          properties:
            summary:
              type: string
    PostVisitSummaryRequest:
      type: object
      required: [patient_id, visit_id]
      properties:
        patient_id:
          type: string
          format: uuid
        visit_id:
          type: string
          format: uuid
    ApiResponse_PostVisitSummaryResponse:
      type: object
      required: [success, message, timestamp, request_id, data]
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: OK
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string
          format: uuid
        data:
      type: object
      properties:
        summary:
              type: string
    SoapGenerationRequest:
          type: object
      required: [patient_id, visit_id]
          properties:
        patient_id: {type: string}
        visit_id: {type: string}
        transcript: {type: string, nullable: true}
    SoapGenerationResponse:
      type: object
      required: [patient_id, visit_id, soap_note, generated_at, message]
      properties:
        patient_id: {type: string}
        visit_id: {type: string}
        soap_note:
          type: object
          additionalProperties: true
        generated_at: {type: string}
        message: {type: string}
    SoapNoteDTO:
      type: object
      required: [subjective, objective, assessment, plan, highlights, red_flags, generated_at]
      properties:
        subjective: {type: string}
        objective: {type: object, additionalProperties: true}
        assessment: {type: string}
        plan: {type: string}
        highlights: {type: array, items: {type: string}}
        red_flags: {type: array, items: {type: string}}
        generated_at: {type: string}
        model_info: {type: object, additionalProperties: true, nullable: true}
        confidence_score: {type: number, nullable: true}
    TranscriptionSessionDTO:
      type: object
      required: [audio_file_path, transcript, transcription_status, started_at, completed_at, error_message, audio_duration_seconds, word_count]
      properties:
        audio_file_path: {type: string, nullable: true}
        transcript: {type: string, nullable: true}
        transcription_status: {type: string}
        started_at: {type: string, nullable: true}
        completed_at: {type: string, nullable: true}
        error_message: {type: string, nullable: true}
        audio_duration_seconds: {type: number, nullable: true}
        word_count: {type: integer, nullable: true}
        structured_dialogue:
              type: array
          items: {type: object, additionalProperties: true}
          nullable: true
    ApiResponse_TranscriptionSessionDTO:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: Success}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/TranscriptionSessionDTO'
    ApiResponse_SoapNoteDTO:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: Success}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/SoapNoteDTO'
    NotesVitalsPayload:
      type: object
      required: [patient_id, visit_id, vitals]
      properties:
        patient_id: {type: string}
        visit_id: {type: string}
        vitals: {type: object, additionalProperties: true}
    CreateWalkInVisitRequestSchema:
      type: object
      required: [name, mobile]
      properties:
        name: {type: string, description: Patient name}
        mobile: {type: string, description: Patient mobile number}
        age: {type: integer, nullable: true, description: Patient age}
        gender: {type: string, nullable: true, description: Patient gender}
    CreateWalkInVisitResponseSchema:
      type: object
      required: [patient_id, visit_id, workflow_type, status, message]
      properties:
        patient_id: {type: string}
        visit_id: {type: string}
        workflow_type: {type: string}
        status: {type: string}
        message: {type: string}
    ApiResponse_CreateWalkInVisitResponseSchema:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'Walk-in visit created successfully'}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/CreateWalkInVisitResponseSchema'
    DoctorPreferencesResponse:
      type: object
      required: [doctor_id, global_categories, selected_categories, max_questions]
      properties:
        doctor_id: {type: string}
        global_categories:
          type: array
          items: {type: string}
        selected_categories:
          type: array
          items: {type: string}
        max_questions: {type: integer}
    UpsertPreferencesRequest:
      type: object
      properties:
        categories:
          type: array
          items: {type: string}
          default: []
        max_questions:
          type: integer
          minimum: 1
          maximum: 10
        global_categories:
          type: array
          nullable: true
          items: {type: string}
    ApiResponse_DoctorPreferencesResponse:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: Doctor preferences loaded}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/DoctorPreferencesResponse'
    AudioFileResponse:
      type: object
      required: [audio_id, filename, content_type, file_size, audio_type, created_at, updated_at]
      properties:
        audio_id: {type: string}
        filename: {type: string}
        content_type: {type: string}
        file_size: {type: integer}
        duration_seconds: {type: number, nullable: true}
        patient_id: {type: string, nullable: true}
        visit_id: {type: string, nullable: true}
        adhoc_id: {type: string, nullable: true}
        audio_type: {type: string}
        created_at: {type: string}
        updated_at: {type: string}
    AudioListResponse:
          type: object
      required: [files, total_count, limit, offset]
      properties:
        files:
          type: array
          items: {$ref: '#/components/schemas/AudioFileResponse'}
        total_count: {type: integer}
        limit: {type: integer}
        offset: {type: integer}
    AudioDialogueResponse:
      type: object
      required: [audio_id, filename, audio_type, created_at]
      properties:
        audio_id: {type: string}
        filename: {type: string}
        duration_seconds: {type: number, nullable: true}
        patient_id: {type: string, nullable: true}
        visit_id: {type: string, nullable: true}
        adhoc_id: {type: string, nullable: true}
        audio_type: {type: string}
        created_at: {type: string}
        structured_dialogue:
          type: array
          items: {type: object, additionalProperties: true}
          nullable: true
    AudioDialogueListResponse:
      type: object
      required: [dialogues, total_count, limit, offset]
      properties:
        dialogues:
          type: array
          items: {$ref: '#/components/schemas/AudioDialogueResponse'}
        total_count: {type: integer}
        limit: {type: integer}
        offset: {type: integer}
    ApiResponse_AudioListResponse:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'Audio files listed'}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/AudioListResponse'
    ApiResponse_AudioDialogueListResponse:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'Audio dialogues listed'}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/AudioDialogueListResponse'
    ApiResponse_AudioFileResponse:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'Audio metadata retrieved'}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/AudioFileResponse'
    IntakeStartRequest:
      type: object
      required: [patient_id, doctor_id]
      properties:
        patient_id: {type: string}
        doctor_id: {type: string}
    IntakeStartResponse:
      type: object
      required: [patient_id, doctor_id, categories, max_questions, asked_count, created_at]
      properties:
        patient_id: {type: string}
        doctor_id: {type: string}
        categories:
          type: array
          items: {type: string}
        max_questions: {type: integer}
        asked_count: {type: integer}
        created_at: {type: string, format: date-time}
    NextQuestionRequest:
      type: object
      required: [patient_id]
      properties:
        patient_id: {type: string}
        last_answer: {type: string, nullable: true}
    NextQuestionResponse:
      type: object
      required: [question, asked_count, max_questions]
      properties:
        question: {type: string}
        asked_count: {type: integer}
        max_questions: {type: integer}
    ApiResponse_IntakeStartResponse:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'Intake started'}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/IntakeStartResponse'
    ApiResponse_NextQuestionResponse:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'Next question'}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/NextQuestionResponse'
    AdhocTranscriptionResponse:
      type: object
      required: [transcript]
      properties:
        transcript: {type: string}
        language: {type: string, nullable: true}
        confidence: {type: number, nullable: true}
        duration: {type: number, nullable: true}
        word_count: {type: integer, nullable: true}
        model: {type: string, nullable: true}
        filename: {type: string, nullable: true}
        adhoc_id: {type: string, nullable: true}
    StructureTextRequest:
      type: object
      required: [transcript]
      properties:
        transcript: {type: string}
        model: {type: string, nullable: true}
        adhoc_id: {type: string, nullable: true}
    ActionPlanRequest:
      type: object
      required: [adhoc_id]
      properties:
        adhoc_id: {type: string}
    ActionPlanResponse:
      type: object
      required: [adhoc_id, status, message]
      properties:
        adhoc_id: {type: string}
        status: {type: string}
        message: {type: string}
    ApiResponse_AdhocTranscriptionResponse:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: Success}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/AdhocTranscriptionResponse'
    ApiResponse_ActionPlanResponse:
      type: object
      required: [success, message, timestamp, request_id]
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'Action plan generation started'}
        timestamp: {type: string, format: date-time}
        request_id: {type: string, format: uuid}
        data:
          $ref: '#/components/schemas/ActionPlanResponse'
tags:
  - name: Health
    description: Health and readiness checks
  - name: Patients
    description: Patient management and intake
  - name: Intake
    description: Intake session management
  - name: Workflow
    description: Workflow management
  - name: Notes
    description: Clinical notes and documentation
  - name: Transcription
    description: Audio transcription services
  - name: Audio
    description: Audio file management
  - name: Doctor
    description: Doctor preferences and settings